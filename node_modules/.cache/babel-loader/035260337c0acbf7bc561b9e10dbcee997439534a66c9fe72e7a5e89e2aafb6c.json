{"ast":null,"code":"var _jsxFileName = \"E:\\\\q-a-project-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport { nanoid } from 'nanoid';\nimport Begin from './components/Begin';\nimport Questions from './components/Question';\nimport { Route, Routes } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const [started, setStarted] = React.useState(false);\n  const [count, setCount] = React.useState(0);\n  const [correct, setCorrect] = React.useState(0);\n  const [checked, setChecked] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  // const [state, setState] = React.useState([]);\n\n  const shuffleArray = arr => arr.sort(() => Math.random() - 0.5);\n  React.useEffect(() => {\n    async function getQuestions() {\n      const res = await fetch('https://opentdb.com/api.php?amount=5&category=23&difficulty=medium&type=multiple');\n      const data = await res.json();\n      // setState(data.results);\n      let q = [];\n      data.results.forEach(question => {\n        q.push({\n          id: nanoid(),\n          question: question.question,\n          correct: question.correct_answer,\n          selected: null,\n          checked: false,\n          answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        });\n      });\n      setQuestions(q);\n    }\n    getQuestions();\n  }, [count]);\n\n  // console.log(questions[0].correct);\n  // console.log(questions[1].correct);\n  // console.log(questions[2].correct);\n  // console.log(questions[3].correct);\n  // console.log(questions[4].correct);\n  function handleChecked() {\n    let selected = true;\n    questions.forEach(question => {\n      if (question.selected === null) {\n        selected = false;\n        return;\n      }\n    });\n    if (!selected) {\n      return;\n    }\n    setQuestions(questions => questions.map(question => {\n      return {\n        ...question,\n        checked: true\n      };\n    }));\n    setChecked(true);\n    let correct = 0;\n    questions.forEach(question => {\n      if (question.correct === question.selected) {\n        correct += 1;\n      }\n    });\n    setCorrect(correct);\n  }\n  function handleClickAnswer(id, answer) {\n    setQuestions(questions => questions.map(question => {\n      return question.id === id ? {\n        ...question,\n        selected: answer\n      } : question;\n    }));\n  }\n  function handlePlayAgain() {\n    setCount(count => count + 1);\n    setChecked(false);\n  }\n  const questionElement = questions ? questions.map(question => {\n    return /*#__PURE__*/_jsxDEV(Questions, {\n      handleClickAnswer: handleClickAnswer,\n      q: question,\n      id: question.id\n    }, question.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }) : [];\n  let questionComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [questionElement, checked && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"score\",\n      children: [\"You Scored \", correct, \" / 5\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn check-btn check\",\n      onClick: checked ? handlePlayAgain : handleChecked,\n      children: checked ? 'Play Again' : 'Check Answers'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 3\n  }, this);\n\n  ////////////////////////////////////////////////////////\n  /////////////////////////////////////////////////////////////\n\n  // const subjects = state.map(sub => {\n  //   return (\n  //     <Subjects \n  //       key={nanoid()}\n  //       question = {sub.question}\n  //       correct_answer = {sub.correct_answer}\n  //       incorrect_answers = {sub.incorrect_answers}\n  //       />\n  //       )\n  //     });\n\n  //     const all = (\n  //       <div>\n  //         {subjects}\n  //         <button className='btn check-btn'>Check Answers</button>\n  //       </div>\n  //     )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Begin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/subjects\",\n        element: questionComponent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RH+4x2pm6rLrNMg225RfNYTSBmU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Begin","Questions","Route","Routes","App","count","setCount","useState","correct","setCorrect","checked","setChecked","questions","setQuestions","shuffleArray","arr","sort","Math","random","useEffect","getQuestions","res","fetch","data","json","q","results","forEach","question","push","id","correct_answer","selected","answers","incorrect_answers","handleChecked","map","handleClickAnswer","answer","handlePlayAgain","questionElement","questionComponent"],"sources":["E:/q-a-project-react/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport {nanoid} from 'nanoid';\nimport Begin from './components/Begin';\nimport Questions from './components/Question';\nimport { Route, Routes} from \"react-router-dom\";\n\n\n\nfunction App() {\n  // const [started, setStarted] = React.useState(false);\n  const [count, setCount] = React.useState(0);\n  const [correct, setCorrect] = React.useState(0);\n  const [checked, setChecked] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  // const [state, setState] = React.useState([]);\n\n  const shuffleArray = (arr)=> arr.sort(()=> Math.random() - 0.5);\n  \n  React.useEffect(()=> {\n    async function getQuestions() {\n      const res = await fetch('https://opentdb.com/api.php?amount=5&category=23&difficulty=medium&type=multiple');\n      const data = await res.json();\n      // setState(data.results);\n      let q =[];\n      data.results.forEach(question => {\n        q.push({id:nanoid(), question:question.question, correct:question.correct_answer, selected:null, checked:false, answers:shuffleArray([...question.incorrect_answers, question.correct_answer])})\n      });\n      setQuestions(q);\n    }\n    getQuestions()\n  }, [count]);\n\n    // console.log(questions[0].correct);\n    // console.log(questions[1].correct);\n    // console.log(questions[2].correct);\n    // console.log(questions[3].correct);\n    // console.log(questions[4].correct);\n  function handleChecked() {\n    let selected = true;\n    questions.forEach(question => {\n      if(question.selected === null) {\n        selected = false;\n        return\n      }\n    })\n\n    if(!selected) {\n      return\n    }\n    setQuestions(questions => questions.map(question => {\n      return {...question, checked: true}\n    }));\n    setChecked(true)\n\n    let correct = 0;\n    questions.forEach(question => {\n      if(question.correct === question.selected) {\n        correct += 1;\n      }\n    })\n    setCorrect(correct);\n  }\n\n  function handleClickAnswer(id, answer) {\n    setQuestions(questions => questions.map(question => {\n      return question.id === id ? {...question, selected:answer} : question;\n    }));\n  }\n\n  function handlePlayAgain() {\n    setCount(count => count + 1);\n    setChecked(false);\n  }\n\n\n\n\n const questionElement = questions ? questions.map(question => {\n    return(\n      <Questions \n      key={question.id}\n      handleClickAnswer={handleClickAnswer}\n      q={question}\n      id={question.id}\n      />\n    )\n }) : [];\n\n\n let questionComponent = (\n  <div>\n    {questionElement}\n    {checked && <span className='score'>You Scored {correct} / 5</span>}\n    <button className='btn check-btn check' onClick={checked ? handlePlayAgain : handleChecked }>{checked ? 'Play Again' : 'Check Answers'}</button>\n  </div>\n );\n\n\n\n\n  ////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////\n\n  // const subjects = state.map(sub => {\n  //   return (\n  //     <Subjects \n  //       key={nanoid()}\n  //       question = {sub.question}\n  //       correct_answer = {sub.correct_answer}\n  //       incorrect_answers = {sub.incorrect_answers}\n  //       />\n  //       )\n  //     });\n\n  //     const all = (\n  //       <div>\n  //         {subjects}\n  //         <button className='btn check-btn'>Check Answers</button>\n  //       </div>\n  //     )\n\n\n  return (\n\n\n    <div className=\"App\">\n      <Routes>\n        <Route path='/' element={<Begin />}></Route>\n        <Route path='/subjects' element={questionComponent}></Route>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}